import os
import cv2
import numpy as np

# YOLO 형식을 8점 좌표 형식으로 변환하는 함수 (상대 좌표)
def yolo_to_obb(x_center, y_center, width, height, image_width, image_height):
    w = width * image_width
    h = height * image_height
    x_center *= image_width
    y_center *= image_height
    
    # 네 꼭짓점 좌표 계산 (좌상단, 우상단, 우하단, 좌하단)
    x1, y1 = x_center - w / 2, y_center - h / 2
    x2, y2 = x_center + w / 2, y_center - h / 2
    x3, y3 = x_center + w / 2, y_center + h / 2
    x4, y4 = x_center - w / 2, y_center + h / 2
    
    # 상대 좌표로 변환하여 반환
    return [x1 / image_width, y1 / image_height, x2 / image_width, y2 / image_height,
            x3 / image_width, y3 / image_height, x4 / image_width, y4 / image_height]

# 바운딩 박스를 회전 및 크기 변경에 맞게 변환하는 함수
def rotate_bbox(bbox, angle, original_shape, new_shape, scale_factor):
    orig_h, orig_w = original_shape[:2]
    new_h, new_w = new_shape[:2]
    
    # 바운딩 박스 좌표를 이미지의 중앙을 기준으로 변환
    points = np.array([[bbox[0], bbox[1]], [bbox[2], bbox[3]], [bbox[4], bbox[5]], [bbox[6], bbox[7]]])
    points[:, 0] = points[:, 0] + (new_w - orig_w) / 2  # x좌표 이동
    points[:, 1] = points[:, 1] + (new_h - orig_h) / 2  # y좌표 이동
    
    # 이미지의 중심점 기준으로 회전 변환
    center = (new_w / 2, new_h / 2)
    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
    
    # 좌표 회전
    rotated_points = cv2.transform(np.array([points]), rotation_matrix)[0]
    return rotated_points.flatten().tolist()

# 이미지 및 바운딩 박스 회전 후 저장하는 함수
def augment_and_save(image_path, txt_path, output_image_dir, output_txt_dir, degrees=(-50, 50), scale_factor=1.5):
    # 이미지 불러오기
    image = cv2.imread(image_path)
    bboxes = []
    
    # TXT 파일에서 YOLO 형식 바운딩 박스 좌표 읽기 및 변환
    with open(txt_path, 'r') as f:
        for line in f:
            values = list(map(float, line.strip().split()))
            class_id = int(values[0])
            x_center, y_center, width, height = values[1:]
            obb_coords = yolo_to_obb(x_center, y_center, width, height, image.shape[1], image.shape[0])
            bboxes.append([class_id] + obb_coords)
    
    orig_h, orig_w, _ = image.shape
    
    # 이미지 크기 확대 (물체가 이미지 밖으로 벗어나지 않도록)
    new_w, new_h = int(orig_w * scale_factor), int(orig_h * scale_factor)
    padded_image = np.zeros((new_h, new_w, 3), dtype=np.uint8)
    
    # 이미지 중앙 배치
    x_offset = (new_w - orig_w) // 2
    y_offset = (new_h - orig_h) // 2
    padded_image[y_offset:y_offset+orig_h, x_offset:x_offset+orig_w] = image
    
    # 각도별로 이미지와 바운딩 박스 회전
    for degree in range(degrees[0], degrees[1] + 1):
        # 이미지 회전
        rotation_matrix = cv2.getRotationMatrix2D((new_w / 2, new_h / 2), degree, 1.0)
        rotated_image = cv2.warpAffine(padded_image, rotation_matrix, (new_w, new_h))
        
        # 동일한 이름을 가진 이미지와 TXT 파일 저장
        filename = f"{os.path.splitext(os.path.basename(image_path))[0]}_rot{degree}"
        rotated_image_path = os.path.join(output_image_dir, f"{filename}.png")
        output_txt_path = os.path.join(output_txt_dir, f"{filename}.txt")
        
        # 변환된 이미지 저장
        cv2.imwrite(rotated_image_path, rotated_image)
        
        # 바운딩 박스 회전 및 저장
        with open(output_txt_path, 'w') as f:
            for bbox in bboxes:
                class_id = bbox[0]
                obb_coords = bbox[1:]  # x1, y1, x2, y2, x3, y3, x4, y4
                rotated_obb_coords = rotate_bbox(obb_coords, degree, image.shape, padded_image.shape, scale_factor)
                f.write(f"{class_id} {' '.join(map(str, rotated_obb_coords))}\n")

# 모든 이미지 및 TXT 파일에 대해 증강
def process_directory(image_dir, txt_dir, output_image_dir, output_txt_dir, degrees=(-50, 50), scale_factor=1.5):
    os.makedirs(output_image_dir, exist_ok=True)
    os.makedirs(output_txt_dir, exist_ok=True)
    
    for image_file in os.listdir(image_dir):
        if image_file.endswith('.png') or image_file.endswith('.jpg'):
            image_path = os.path.join(image_dir, image_file)
            txt_path = os.path.join(txt_dir, image_file.replace('.png', '.txt').replace('.jpg', '.txt'))
            
            if os.path.exists(txt_path):
                augment_and_save(image_path, txt_path, output_image_dir, output_txt_dir, degrees, scale_factor)

# 경로 설정
image_dir = '/home/jovyan/data-vol-1/dataset/test1/images'  # 원본 이미지 경로
txt_dir = '/home/jovyan/data-vol-1/dataset/test1/labels'    # YOLO 형식의 TXT 파일 경로 (class, x, y, w, h)
output_image_dir = '/home/jovyan/data-vol-1/dataset/test/images'  # 증강된 이미지 저장 경로
output_txt_dir = '/home/jovyan/data-vol-1/dataset/test/labels'    # 증강된 TXT 파일 저장 경로

# -50도 ~ 50도 범위로 증강 실행
process_directory(image_dir, txt_dir, output_image_dir, output_txt_dir, degrees=(-50, 50), scale_factor=1.5)
