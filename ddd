import os
import cv2
import numpy as np

# YOLO 형식을 9개 좌표 형식으로 변환
def yolo_to_obb(x_center, y_center, width, height, image_width, image_height):
    # 이미지 크기를 기준으로 실제 좌표 계산
    w = width * image_width
    h = height * image_height
    x_center *= image_width
    y_center *= image_height
    
    # 4개의 꼭짓점 좌표 계산 (좌상단, 우상단, 우하단, 좌하단)
    x1, y1 = x_center - w / 2, y_center - h / 2
    x2, y2 = x_center + w / 2, y_center - h / 2
    x3, y3 = x_center + w / 2, y_center + h / 2
    x4, y4 = x_center - w / 2, y_center + h / 2
    
    return [x1, y1, x2, y2, x3, y3, x4, y4]

# 바운딩 박스를 그려서 이미지에 저장하는 함수
def draw_bboxes(image, bboxes, output_image_path):
    for bbox in bboxes:
        class_id, x1, y1, x2, y2, x3, y3, x4, y4 = bbox
        
        # 4개의 꼭짓점을 사용해 바운딩 박스 그리기
        points = [(int(x1), int(y1)), (int(x2), int(y2)), (int(x3), int(y3)), (int(x4), int(y4))]
        
        # 폴리곤 형태로 그리기 (초록색, 두께 2)
        cv2.polylines(image, [np.array(points)], isClosed=True, color=(0, 255, 0), thickness=2)
    
    # 결과 이미지를 저장
    cv2.imwrite(output_image_path, image)
    print(f"Image saved at {output_image_path}")

# TXT 파일에 변환된 좌표를 저장하는 함수
def save_transformed_bboxes_to_txt(bboxes, image_shape, output_txt_path):
    h, w, _ = image_shape
    with open(output_txt_path, 'w') as f:
        for bbox in bboxes:
            class_id, x_center, y_center, width, height = bbox
            obb_coords = yolo_to_obb(x_center, y_center, width, height, w, h)
            f.write(f"{class_id} {obb_coords[0]} {obb_coords[1]} {obb_coords[2]} {obb_coords[3]} {obb_coords[4]} {obb_coords[5]} {obb_coords[6]} {obb_coords[7]}\n")
    print(f"TXT file saved at {output_txt_path}")

# 이미지 및 TXT 파일 경로 설정
def process_image_with_bboxes(image_path, txt_path, output_image_dir, output_txt_dir):
    # 이미지 불러오기
    image = cv2.imread(image_path)
    bboxes = []
    
    # TXT 파일에서 바운딩 박스 좌표 읽기
    with open(txt_path, 'r') as f:
        for line in f:
            values = list(map(float, line.strip().split()))
            bboxes.append(values)
    
    # 변환된 좌표를 새로운 TXT 파일로 저장
    output_txt_path = os.path.join(output_txt_dir, os.path.basename(txt_path))
    save_transformed_bboxes_to_txt(bboxes, image.shape, output_txt_path)

    # 변환된 좌표를 사용하여 이미지에 바운딩 박스를 그리고 저장
    output_image_path = os.path.join(output_image_dir, os.path.basename(image_path))
    obb_bboxes = []
    h, w, _ = image.shape
    for bbox in bboxes:
        class_id, x_center, y_center, width, height = bbox
        obb_coords = yolo_to_obb(x_center, y_center, width, height, w, h)
        obb_bboxes.append([class_id] + obb_coords)
    
    draw_bboxes(image, obb_bboxes, output_image_path)

# 이미지 및 TXT 파일을 처리
def process_directory(image_dir, txt_dir, output_image_dir, output_txt_dir):
    os.makedirs(output_image_dir, exist_ok=True)
    os.makedirs(output_txt_dir, exist_ok=True)
    
    # 모든 이미지와 TXT 파일 처리
    for image_file in os.listdir(image_dir):
        if image_file.endswith('.png') or image_file.endswith('.jpg'):  # 이미지 파일 확장자 확인
            image_path = os.path.join(image_dir, image_file)
            txt_path = os.path.join(txt_dir, image_file.replace('.png', '.txt').replace('.jpg', '.txt'))
            
            if os.path.exists(txt_path):
                process_image_with_bboxes(image_path, txt_path, output_image_dir, output_txt_dir)

# 경로 설정 (이미지, TXT 파일, 결과 저장 경로)
image_dir = '/home/jovyan/data-vol-1/dataset/train/images'
txt_dir = '/home/jovyan/data-vol-1/dataset/train/labels'
output_image_dir = '/home/jovyan/data-vol-1/Y_T_Data/check2/check3/images'
output_txt_dir = '/home/jovyan/data-vol-1/Y_T_Data/check2/check3/labels'

# 이미지와 바운딩 박스를 그린 결과 이미지 및 변환된 TXT 파일 저장
process_directory(image_dir, txt_dir, output_image_dir, output_txt_dir)
