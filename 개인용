import cv2
import os
import pytesseract
import numpy as np
import re

# Tesseract 경로 설정 (필요 시 수정)
pytesseract.pytesseract.tesseract_cmd = '/usr/bin/tesseract'

# 폴더 경로 설정
NUMBER_IMAGE_FOLDER = '/home/jovyan/data-vol-1/0_Retry_Final/STEP1/Mode_1/masked_image_folder'
OUTPUT_FOLDER = '/home/jovyan/data-vol-1/0_Retry_Final/STEP1/Mode_2'

# 출력 폴더 생성
if not os.path.exists(OUTPUT_FOLDER):
    os.makedirs(OUTPUT_FOLDER)

def apply_brightness_threshold(image, brightness_threshold=0.8):
    """이미지에서 밝기 임계값을 적용하여 하얀 픽셀만 남기기"""
    # 그레이스케일 변환
    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    
    # 밝기 임계값을 적용하여 특정 밝기 이상의 픽셀만 남김
    threshold_value = int(255 * brightness_threshold)
    _, bright_areas = cv2.threshold(gray_image, threshold_value, 255, cv2.THRESH_BINARY)

    return bright_areas

def make_non_white_pixels_black(image):
    """픽셀 값이 1이 아닌 픽셀을 모두 검은색(0)으로 변경"""
    # 이진화 이미지에서 1이 아닌 모든 픽셀을 0으로 설정
    image[image != 255] = 0  # 흰색이 아닌 부분을 모두 검정색으로 설정
    return image

def perform_ocr_on_image(image_path, output_name):
    """주어진 이미지에 대해 OCR을 수행하고 보이는 모든 숫자를 저장"""
    # 이미지 로드
    image = cv2.imread(image_path)
    if image is None:
        print(f"Error: 이미지를 불러올 수 없습니다: {image_path}")
        return

    # 밝기 임계값 적용하여 하얀 부분만 남김
    bright_image = apply_brightness_threshold(image)

    # 픽셀 값이 1이 아닌 부분을 모두 검은색으로 변경
    processed_image = make_non_white_pixels_black(bright_image)

    # OCR 수행하여 하얀 부분에서 모든 숫자 인식
    text = pytesseract.image_to_string(processed_image, config='--psm 6')

    # 결과에서 모든 숫자 및 공백(띄어쓰기 포함)을 추출
    numbers = re.findall(r'\d+', text)  # 모든 숫자 패턴을 찾음

    # OCR 결과를 파일로 저장
    output_text_file = os.path.join(OUTPUT_FOLDER, f"{output_name}_ocr_result.txt")
    with open(output_text_file, 'w') as f:
        if numbers:
            f.write(" ".join(numbers) + "\n")  # 모든 숫자를 공백으로 구분하여 저장
        else:
            f.write("No numbers found\n")

def process_images_in_folder():
    """폴더 내 모든 이미지에 대해 OCR 수행"""
    for filename in os.listdir(NUMBER_IMAGE_FOLDER):
        if filename.endswith(('.jpg', '.png')):
            # 이미지 파일 경로
            image_path = os.path.join(NUMBER_IMAGE_FOLDER, filename)
            # OCR 수행
            perform_ocr_on_image(image_path, os.path.splitext(filename)[0])
            print(f"OCR 작업이 완료되었습니다: {filename}")

# 폴더 내 모든 이미지에 대해 OCR 수행
process_images_in_folder()
