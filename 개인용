import cv2
import os
import numpy as np
from ultralytics import YOLO  # Ultralytics YOLO 가져오기

# 경로 설정
YOLO_WEIGHT_PATH = '/home/jovyan/jonglae/Retry1/Main/MODE_0_OCR_WB_YOLO/new_2step_test/best.pt'  # YOLO 가중치 경로
INPUT_FOLDER = '/home/jovyan/data-vol-1/dataset_WB/test/images'  # 입력 이미지 폴더
OUTPUT_BBOX_FOLDER = '/home/jovyan/data-vol-1/Result/2_Measure/YOLO/WB/1step/bbox_img'  # b-box 이미지 출력 폴더
OUTPUT_TXT_FOLDER = '/home/jovyan/data-vol-1/Result/2_Measure/YOLO/WB/1step/text'  # txt 파일 출력 폴더
OUTPUT_MASKED_FOLDER = '/home/jovyan/data-vol-1/Result/2_Measure/YOLO/WB/1step/maskedimg'  # 마스킹된 이미지 출력 폴더

# YOLO 모델 로드
model = YOLO(YOLO_WEIGHT_PATH)

def mask_image(image, boxes, classes):
    """CLASS 1을 제외한 나머지 영역을 가리는 마스크 생성"""
    image_height, image_width = image.shape[:2]
    mask = np.zeros_like(image)  # 전체 검정 마스크 생성

    for i in range(len(boxes)):
        if classes[i] == 1:  # CLASS 1인 경우만 남김
            coords = boxes[i].tolist()
            x1, y1, x2, y2 = int(coords[0]), int(coords[1]), int(coords[2]), int(coords[3])
            mask[y1:y2, x1:x2] = image[y1:y2, x1:x2]  # 해당 영역을 원래 이미지로 유지

    return mask  # 마스킹된 이미지 반환

def detect_yolo(image, image_name):
    """YOLO를 사용하여 바운딩 박스 감지 및 결과 저장"""
    output = []

    # YOLO 감지 결과 가져오기
    results = model.predict(image)  # model.predict 사용

    # 결과에서 OBB 정보 추출
    image_height, image_width = image.shape[:2]
    for result in results:
        boxes = result.obb.xyxy  # OBB 좌표
        classes = result.obb.cls  # 클래스 ID
        masked_image = mask_image(image, boxes, classes)  # 마스킹 이미지 생성

        for i in range(len(boxes)):
            coords = boxes[i].tolist()
            class_id = int(classes[i])
            obb_coords = [
                coords[0] / image_width, coords[1] / image_height,
                coords[2] / image_width, coords[1] / image_height,
                coords[2] / image_width, coords[3] / image_height,
                coords[0] / image_width, coords[3] / image_height
            ]
            output.append(f"{class_id} " + " ".join(map(str, obb_coords)))

            obb_coords_abs = np.array(obb_coords).reshape(-1, 2) * np.array([image_width, image_height])
            obb_coords_abs = obb_coords_abs.astype(np.int32).reshape((-1, 1, 2))
            cv2.polylines(image, [obb_coords_abs], isClosed=True, color=(0, 255, 0), thickness=2)

    if not os.path.exists(OUTPUT_BBOX_FOLDER):
        os.makedirs(OUTPUT_BBOX_FOLDER)
    if not os.path.exists(OUTPUT_TXT_FOLDER):
        os.makedirs(OUTPUT_TXT_FOLDER)
    if not os.path.exists(OUTPUT_MASKED_FOLDER):
        os.makedirs(OUTPUT_MASKED_FOLDER)

    # 결과 이미지와 TXT 파일 저장
    cv2.imwrite(os.path.join(OUTPUT_BBOX_FOLDER, f"{image_name}.jpg"), image)
    with open(os.path.join(OUTPUT_TXT_FOLDER, f"{image_name}.txt"), 'w') as f:
        for entry in output:
            f.write(entry + '\n')

    # 마스킹된 이미지 저장
    cv2.imwrite(os.path.join(OUTPUT_MASKED_FOLDER, f"{image_name}.jpg"), masked_image)

def process_folder(input_folder):
    """폴더 내의 모든 이미지에 대해 YOLO 데이터 처리 및 결과 저장"""
    for filename in os.listdir(input_folder):
        if filename.endswith(('.jpg', '.png')):
            image_path = os.path.join(input_folder, filename)
            image = cv2.imread(image_path)
            detect_yolo(image, filename.split('.')[0])

# 폴더 내 이미지 처리 시작
process_folder(INPUT_FOLDER)
