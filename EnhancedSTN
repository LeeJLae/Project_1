import torch
import torch.nn as nn
from ultralytics import YOLO
from torchvision import models
import os

# SimCLR Backbone 정의
class SimCLR(nn.Module):
    def __init__(self, base_model, out_dim):
        super(SimCLR, self).__init__()
        self.encoder = base_model
        self.projector = nn.Sequential(
            nn.Linear(512, 256),
            nn.ReLU(),
            nn.Linear(256, out_dim)
        )

    def forward(self, x):
        h = self.encoder(x)
        z = self.projector(h)
        return h, z

# YOLO와 SimCLR을 결합한 모델 정의
class YOLOWithSimCLR(nn.Module):
    def __init__(self, yolo_model, simclr):
        super(YOLOWithSimCLR, self).__init__()
        self.yolo = yolo_model
        self.simclr = simclr

    def forward(self, x):
        _, z = self.simclr(x)  # SimCLR에서 특징 추출
        return self.yolo.model(z)  # YOLO 모델에 전달하여 예측 수행
    
    def train_yolo_with_simclr(self, data_path, epochs):
        # YOLO의 train 메서드를 호출하여 학습 수행
        self.yolo.train(
            data=data_path,
            epochs=epochs,
            imgsz=640,
            batch=16,
            lr0=0.001,
            device='cuda',
            workers=4,
            hsv_h=0.015,
            hsv_s=0.7,
            hsv_v=0.4,
            flipud=0.5,
            fliplr=0.5,
            translate=0.1,
            scale=0.5,
            shear=0.2,
            perspective=0.1,
            mosaic=1.0,
            mixup=0.2,
            copy_paste=0.1,
            amp=False
        )

# YOLO 및 SimCLR 초기화 함수
def initialize_yolo_with_simclr():
    yolo_model = YOLO('/home/jovyan/yolo11obb/yolo11m-obb.pt')
    resnet_weights_path = '/home/jovyan/resnet_pretrain/resnet50.pth'
    resnet = models.resnet50(pretrained=False)
    resnet.load_state_dict(torch.load(resnet_weights_path))
    resnet.fc = nn.Identity()
    simclr_model = SimCLR(base_model=resnet, out_dim=128)
    combined_model = YOLOWithSimCLR(yolo_model, simclr_model)
    return combined_model

# 학습 실행 및 모델 저장
output_dir = '/home/jovyan/data-vol-1/Result/SimCLR_YOLO_b16'
os.makedirs(output_dir, exist_ok=True)

# YOLOWithSimCLR 모델 초기화
model = initialize_yolo_with_simclr()

# 통합 학습 실행
data_path = '/home/jovyan/data-vol-1/Y_T_Data/new_obb.yaml'
model.train_yolo_with_simclr(data_path, epochs=50)

# 학습 완료 후 모델 저장
model_save_path = os.path.join(output_dir, 'SimCLR_YOLO_b16_model.pt')
torch.save(model.state_dict(), model_save_path)
