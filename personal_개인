# STEP LR 추가###########################################


from ultralytics import YOLO
import os

# YOLO 모델 로드
model = YOLO('/home/jovyan/yolo11obb/yolo11m-obb.pt')

# 학습에 사용할 데이터셋 경로를 정의한 .yaml 파일 경로
train_data = '/home/jovyan/data-vol-1/Y_T_Data/new_obb.yaml'

# 학습 결과를 저장할 디렉토리 생성
output_dir = '/home/jovyan/data-vol-1/Result/TEST2_2step_yolov11m'
os.makedirs(output_dir, exist_ok=True)

# IoU 계산 함수
def calculate_iou(box1, box2):
    poly1 = Polygon([(box1[i], box1[i+1]) for i in range(0, len(box1), 2)])
    poly2 = Polygon([(box2[i], box2[i+1]) for i in range(0, len(box2), 2)])
    if not poly1.is_valid or not poly2.is_valid:
        return 0.0
    intersection = poly1.intersection(poly2).area
    union = poly1.union(poly2).area
    return intersection / union if union > 0 else 0

# 매 epoch의 손실 값 기록 함수
def save_loss_values(epoch, metrics):
    loss_path = os.path.join(output_dir, 'epoch_loss_results.txt')
    with open(loss_path, 'a') as f:
        f.write(f"Epoch {epoch}: Box Loss: {metrics.box_loss:.4f}, "
                f"Cls Loss: {metrics.cls_loss:.4f}, Dfl Loss: {metrics.dfl_loss:.4f}\n")

# Step LR 설정 함수
def adjust_learning_rate(optimizer, epoch, step_size, gamma=0.1):
    if epoch % step_size == 0 and epoch > 0:
        for param_group in optimizer.param_groups:
            param_group['lr'] *= gamma

# 1단계 학습 (lr=0.001, 50 epochs)
initial_lr = 0.001
step_size = 10  # 학습률을 감소시키는 주기
gamma = 0.1  # 감소율

for epoch in range(50):
    adjust_learning_rate(model.optimizer, epoch, step_size, gamma)
    metrics = model.train(
        data=train_data,
        epochs=1,
        imgsz=640,
        batch=16,
        lr0=initial_lr,
        device='cuda',
        amp=False,
        patience=40,
        val=False,
        hsv_h=0.015,
        hsv_s=0.7,
        hsv_v=0.4,
        flipud=0.5,
        fliplr=0.5,
        translate=0.1,
        scale=0.5,
        shear=0.2,
        perspective=0.1,
        mosaic=1.0,
        copy_paste=1.0
    )
    save_loss_values(epoch + 1, metrics)

# 1단계 학습된 모델 저장
model_save_path = os.path.join(output_dir, 'TEST2_1st.pt')
model.save(model_save_path)

# 1단계 학습된 파라미터를 불러오기
model = YOLO(model_save_path)

# 2단계 학습 (lr=0.0001, 50 epochs, 1단계 학습 파라미터 유지)
initial_lr = 0.0001
for epoch in range(50):
    adjust_learning_rate(model.optimizer, epoch, step_size, gamma)
    metrics = model.train(
        data=train_data,
        epochs=1,
        imgsz=640,
        batch=16,
        lr0=initial_lr,
        device='cuda',
        amp=False,
        val=False,
        hsv_h=0.015,
        hsv_s=0.7,
        hsv_v=0.4,
        flipud=0.5,
        fliplr=0.5,
        translate=0.1,
        scale=0.5,
        shear=0.2,
        perspective=0.1,
        mosaic=1.0,
        copy_paste=1.0
    )
    save_loss_values(epoch + 51, metrics)

# 2단계 학습된 모델 저장
model.save(os.path.join(output_dir, 'TEST2_2nd.pt'))

# 테스트 이미지 경로 설정
test_image_dir = '/home/jovyan/data-vol-1/trashcan/test_image2'

# 모델 평가 함수
def test_model():
    results = model.predict(
        source=test_image_dir,
        save=True,
        project=output_dir,
        name="test_results"
    )
    print(f"Test results saved to: {os.path.join(output_dir, '2step_YOLO')}")
    
    iou_results_path = os.path.join(output_dir, '2step_YOLO', 'iou_results.txt')
    with open(iou_results_path, 'w') as f:
        for result in results:
            ground_truths = result.boxes
            predictions = result.pred
            for gt_box, pred_box in zip(ground_truths, predictions):
                iou = calculate_iou(gt_box.xyxy, pred_box.xyxy)
                f.write(f"IoU for {result.path}: {iou:.4f}\n")
    
    print(f"IoU results saved to: {iou_results_path}")

# 테스트 실행
test_model()
