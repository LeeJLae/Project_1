weight", "features.13.conv.7.weight", "features.13.conv.7.bias", "features.13.conv.7.running_mean", "features.13.conv.7.running_var", "features.13.conv.7.num_batches_tracked", "features.13.conv.0.weight", "features.13.conv.1.weight", "features.13.conv.1.bias", "features.13.conv.1.running_mean", "features.13.conv.1.running_var", "features.13.conv.1.num_batches_tracked", "features.14.conv.4.weight", "features.14.conv.4.bias", "features.14.conv.4.running_mean", "features.14.conv.4.running_var", "features.14.conv.4.num_batches_tracked", "features.14.conv.6.weight", "features.14.conv.7.weight", "features.14.conv.7.bias", "features.14.conv.7.running_mean", "features.14.conv.7.running_var", "features.14.conv.7.num_batches_tracked", "features.14.conv.0.weight", "features.14.conv.1.weight", "features.14.conv.1.bias", "features.14.conv.1.running_mean", "features.14.conv.1.running_var", "features.14.conv.1.num_batches_tracked", "features.15.conv.4.weight", "features.15.conv.4.bias", "features.15.conv.4.running_mean", "features.15.conv.4.running_var", "features.15.conv.4.num_batches_tracked", "features.15.conv.6.weight", "features.15.conv.7.weight", "features.15.conv.7.bias", "features.15.conv.7.running_mean", "features.15.conv.7.running_var", "features.15.conv.7.num_batches_tracked", "features.15.conv.0.weight", "features.15.conv.1.weight", "features.15.conv.1.bias", "features.15.conv.1.running_mean", "features.15.conv.1.running_var", "features.15.conv.1.num_batches_tracked", "features.16.conv.4.weight", "features.16.conv.4.bias", "features.16.conv.4.running_mean", "features.16.conv.4.running_var", "features.16.conv.4.num_batches_tracked", "features.16.conv.6.weight", "features.16.conv.7.weight", "features.16.conv.7.bias", "features.16.conv.7.running_mean", "features.16.conv.7.running_var", "features.16.conv.7.num_batches_tracked", "features.16.conv.0.weight", "features.16.conv.1.weight", "features.16.conv.1.bias", "features.16.conv.1.running_mean", "features.16.conv.1.running_var", "features.16.conv.1.num_batches_tracked", "features.17.conv.4.weight", "features.17.conv.4.bias", "features.17.conv.4.running_mean", "features.17.conv.4.running_var", "features.17.conv.4.num_batches_tracked", "features.17.conv.6.weight", "features.17.conv.7.weight", "features.17.conv.7.bias", "features.17.conv.7.running_mean", "features.17.conv.7.running_var", "features.17.conv.7.num_batches_tracked", "features.17.conv.0.weight", "features.17.conv.1.weight", "features.17.conv.1.bias", "features.17.conv.1.running_mean", "features.17.conv.1.running_var", "features.17.conv.1.num_batches_tracked", "classifier.weight", "classifier.bias". 
        size mismatch for features.1.conv.1.weight: copying a param with shape torch.Size([32]) from checkpoint, the shape in current model is torch.Size([16, 32, 1, 1]).
        size mismatch for features.2.conv.3.weight: copying a param with shape torch.Size([96, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([24]).
        size mismatch for features.3.conv.3.weight: copying a param with shape torch.Size([144, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([24]).
        size mismatch for features.4.conv.3.weight: copying a param with shape torch.Size([144, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([32]).
        size mismatch for features.5.conv.3.weight: copying a param with shape torch.Size([192, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([32]).
        size mismatch for features.6.conv.3.weight: copying a param with shape torch.Size([192, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([32]).
        size mismatch for features.7.conv.3.weight: copying a param with shape torch.Size([192, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([64]).
        size mismatch for features.8.conv.3.weight: copying a param with shape torch.Size([384, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([64]).
        size mismatch for features.9.conv.3.weight: copying a param with shape torch.Size([384, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([64]).
        size mismatch for features.10.conv.3.weight: copying a param with shape torch.Size([384, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([64]).
        size mismatch for features.11.conv.3.weight: copying a param with shape torch.Size([384, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([96]).
        size mismatch for features.12.conv.3.weight: copying a param with shape torch.Size([576, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([96]).
        size mismatch for features.13.conv.3.weight: copying a param with shape torch.Size([576, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([96]).
        size mismatch for features.14.conv.3.weight: copying a param with shape torch.Size([576, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([160]).
        size mismatch for features.15.conv.3.weight: copying a param with shape torch.Size([960, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([160]).
        size mismatch for features.16.conv.3.weight: copying a param with shape torch.Size([960, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([160]).
        size mismatch for features.17.conv.3.weight: copying a param with shape torch.Size([960, 1, 3, 3]) from checkpoint, the shape in current model is torch.Size([320]).
