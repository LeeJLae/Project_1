import os
import json
import cv2
import xml.etree.ElementTree as ET
import numpy as np

def create_masks_from_folders(image_folder, xml_folder, json_folder, mask_output_folder):
    # 출력 폴더 생성
    os.makedirs(mask_output_folder, exist_ok=True)

    # 이미지 폴더의 모든 파일을 순회
    for filename in os.listdir(image_folder):
        image_path = os.path.join(image_folder, filename)
        xml_path = os.path.join(xml_folder, f"{os.path.splitext(filename)[0]}.xml")
        json_path = os.path.join(json_folder, f"{os.path.splitext(filename)[0]}.json")
        mask_output_path = os.path.join(mask_output_folder, f"{os.path.splitext(filename)[0]}_mask.png")

        # XML과 JSON 파일이 모두 존재하는지 확인
        if not os.path.exists(xml_path) or not os.path.exists(json_path):
            print(f"XML 또는 JSON 파일을 찾을 수 없습니다: {xml_path}, {json_path}")
            continue

        # 이미지 로드 및 마스크 초기화
        image = cv2.imread(image_path)
        if image is None:
            print(f"이미지를 불러오는 데 실패했습니다: {image_path}")
            continue
        mask = np.zeros(image.shape[:2], dtype=np.uint8)

        # XML 데이터에서 객체의 polygon 정보 가져오기
        tree = ET.parse(xml_path)
        root = tree.getroot()
        for obj in root.findall('object'):
            polygon = obj.find('polygon')
            if polygon is None:
                print(f"{xml_path}에서 'polygon' 요소를 찾을 수 없습니다.")
                continue

            # 폴리곤 좌표를 사용해 객체 마스크 생성
            points = []
            for pt in polygon.findall('pt'):
                x = int(pt.find('x').text)
                y = int(pt.find('y').text)
                points.append([x, y])
            points = np.array(points, dtype=np.int32)

            # 마스크에 폴리곤 채우기
            cv2.fillPoly(mask, [points], 255)

        # JSON 데이터에서 선 정보를 사용해 추가 마스크 생성
        with open(json_path, 'r') as f:
            measure_data = json.load(f)

        for line in measure_data:
            if "points" in line and len(line["points"]) >= 2:
                start_point = (int(line["points"][0]["x"]), int(line["points"][0]["y"]))
                end_point = (int(line["points"][1]["x"]), int(line["points"][1]["y"]))
                thickness = int(line.get("line_width", 1))
                cv2.line(mask, start_point, end_point, 255, thickness)

        # 마스크 저장
        cv2.imwrite(mask_output_path, mask)
        print(f"마스크가 생성되어 저장되었습니다: {mask_output_path}")

# 사용 예시
image_folder = '/home/jovyan/data-vol-1/Y_T_Result/SAM_Train/image'
xml_folder = '/home/jovyan/data-vol-1/Y_T_Result/SAM_Train/Class'
json_folder = '/home/jovyan/data-vol-1/Y_T_Result/SAM_Train/measure'
mask_output_folder = '/home/jovyan/data-vol-1/Y_T_Result/SAM_Train/mask'
create_masks_from_folders(image_folder, xml_folder, json_folder, mask_output_folder)
